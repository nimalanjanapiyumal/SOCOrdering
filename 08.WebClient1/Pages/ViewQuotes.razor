@page "/view-quotes"
@inject _08.WebClient1.Services.QuotationApiService QuoteService
@inject WebClient1.State.OrderState State
@inject NavigationManager Nav

<h3>Quotations</h3>

@if (State.OrderId == null)
{
    <div class="alert alert-warning">No order in progress. Start with <a href="/create-order">Create Order</a>.</div>
}
else
{
    <button class="btn btn-primary" @onclick="LoadQuotes">Load Quotations</button>

    @if (State.Quotations != null && State.Quotations.Any())
    {
        <div class="mt-3">
            @foreach (var q in State.Quotations)
            {
                <div class="card mb-2">
                    <div class="card-header">
                        Distributor: @q.Distributor | ETA: @q.EstimatedDays days
                    </div>
                    <div class="card-body">
                        <table class="table">
                            <thead><tr><th>Product</th><th>Unit Price</th><th>Available</th></tr></thead>
                            <tbody>
                                @foreach (var item in q.Items)
                                {
                                    <tr>
                                        <td>@item.ProductId</td>
                                        <td>@item.UnitPrice</td>
                                        <td>@item.Available</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            <button class="btn btn-success" @onclick="GoCompare">Compare & Select</button>
        </div>
    }
}

@code {
    private async Task LoadQuotes()
    {
        if (State.OrderId == null) return;
        var quotes = await QuoteService.GetQuotesAsync(State.OrderId.Value);
        State.Quotations = quotes;
    }

    private void GoCompare()
    {
        Nav.NavigateTo($"/review-selection");
    }
}