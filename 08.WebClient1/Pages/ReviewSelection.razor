
@page "/review-selection"
@using _01.Contracts.Models
@using System.Linq
@inject _08.WebClient1.Services.QuotationApiService QuoteService
@inject _08.WebClient1.State.OrderState State
@inject NavigationManager Nav

<h3>Review Quotes</h3>

@if (State.OrderId == null)
{
    <div class="alert alert-warning">No order in progress.</div>
}
else
{

        if (options == null)
        {
            <div>Loading...</div>
        }
        else
        {

            <table class="table">
                <thead>
                    <tr><th>Select</th><th>Vendor</th><th>Total</th><th>ETA (days)</th></tr>
                </thead>
                <tbody>
                        @foreach (var opt in options)
                        {
                            <tr>
                                <td>
                                    <input type="radio" name="vendor" @onchange="() => selected = opt" checked="@(selected == opt)" />
                                </td>
                                <td>@opt.Distributor</td>
                                <td>@opt.TotalCost.ToString("C")</td>
                                <td>@opt.EstimatedDays</td>
                            </tr>
                        }
                </tbody>
            </table>

            <button class="btn btn-success" disabled="@(selected == null)" @onclick="ConfirmSelection">Confirm Selection</button>
        }
}

@code {
    private List<VendorOption> options;
    private VendorOption selected;

    protected override async Task OnInitializedAsync()
    {
        await LoadOptions();
    }

    private async Task LoadOptions()
    {
        if (State.OrderId == null) return;
        if (State.Quotations == null || !State.Quotations.Any())
        {
            var quotes = await QuoteService.GetQuotesAsync(State.OrderId.Value);
            State.Quotations = quotes;
        }
        options = State.Quotations.Select(q => new VendorOption
        {
            Distributor = q.Distributor,
            EstimatedDays = q.EstimatedDays,
            TotalCost = q.Items.Sum(i => i.UnitPrice * (State.OrderItems.First(it => it.ProductId == i.ProductId).Quantity))
        })
        .OrderBy(o => o.TotalCost)
        .Take(3)
        .ToList();
    }

    private void ConfirmSelection()
    {
        if (selected == null) return;
        State.Summary = new OrderSummaryDto
        {
            OrderId = State.OrderId!.Value,
            CustomerId = State.CustomerId!.Value,
            Status = "Vendor Selected",
            CreatedAt = DateTime.UtcNow,
            Selections = Array.Empty<SelectionDto>(),
            TotalCost = selected.TotalCost,
            EstimatedDeliveryDays = selected.EstimatedDays,
            SelectedVendor = selected.Distributor
        };
        Nav.NavigateTo("/summary");
    }


    private record VendorOption
    {
        public string Distributor { get; init; }
        public decimal TotalCost { get; init; }
        public int EstimatedDays { get; init; }
    }
}