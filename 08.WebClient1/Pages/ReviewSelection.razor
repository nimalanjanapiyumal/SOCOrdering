@page "/review-selection"
@using _08.WebClient1.Shared
@inject _08.WebClient1.Services.ComparisonApiService ComparisonService
@inject _08.WebClient1.Services.NotificationApiService NotificationService
@inject _08.WebClient1.Services.OrderApiService OrderService
@inject _08.WebClient1.State.OrderState State

<h3>Review & Finalize</h3>

@if (State.OrderId == null)
{
    <div class="alert alert-warning">No order in progress.</div>
}
else
{
    <button class="btn btn-primary" @onclick="RunComparison">Run Comparison</button>

    @if (State.Selections != null && State.Selections.Any())
    {
        <h5 class="mt-3">Selected Distribution</h5>
        <table class="table">
            <thead><tr><th>Product</th><th>Distributor</th><th>Qty</th><th>UnitPrice</th></tr></thead>
            <tbody>
                @foreach (var s in State.Selections)
                {
                    <tr>
                        <td>@s.ProductId</td>
                        <td>@s.Distributor</td>
                        <td>@s.QuantityChosen</td>
                        <td>@s.UnitPrice</td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-success" @onclick="SendNotification">Notify Customer & Summary</button>
    }
}

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

@code {
    private string Message;

    private async Task RunComparison()
    {
        if (State.OrderId == null) return;

        var result = await ComparisonService.CompareAsync(State.OrderId.Value);
        // Expecting the structure from comparison controller: { selections: [...] , orderId: ... }
        // Dynamic parsing:
        if (result is null) { Message = "Comparison failed."; return; }

        // Extract selections via System.Text.Json or dynamic
        var json = System.Text.Json.JsonSerializer.Serialize(result);
        using var doc = System.Text.Json.JsonDocument.Parse(json);
        if (doc.RootElement.TryGetProperty("selections", out var sels))
        {
            var list = new List<_01.Contracts.Models.SelectionDto>();
            foreach (var el in sels.EnumerateArray())
            {
                list.Add(new _01.Contracts.Models.SelectionDto
                {
                    ProductId = el.GetProperty("productId").GetInt32(),
                    Distributor = el.GetProperty("distributor").GetString(),
                    UnitPrice = el.GetProperty("unitPrice").GetDecimal(),
                    QuantityChosen = el.GetProperty("quantityChosen").GetInt32()
                });
            }
            State.Selections = list;
            Message = "Comparison done.";
        }
    }

    private async Task SendNotification()
    {
        if (State.OrderId == null || State.CustomerId == null) return;
        if (State.Selections == null || !State.Selections.Any()) return;

        var selectionDtos = new List<_01.Contracts.Models.ProductSelectionDto>();
        foreach (var s in State.Selections)
        {
            selectionDtos.Add(new _01.Contracts.Models.ProductSelectionDto
            {
                ProductId = s.ProductId,
                Distributor = s.Distributor,
                UnitPrice = s.UnitPrice,
                QuantityChosen = s.QuantityChosen,
                EstimatedDeliveryDays = 0
            });
        }

        var notify = new _01.Contracts.Models.NotificationRequestDto
        {
            OrderId = State.OrderId.Value,
            CustomerId = State.CustomerId.Value,
            Email = "customer@example.com",
            Selections = selectionDtos
        };

        var ok = await NotificationService.SendAsync(notify);
        Message = ok ? "Notification sent." : "Notification failed.";

        // fetch summary
        State.Summary = await OrderService.GetSummaryAsync(State.OrderId.Value);
    }
}
